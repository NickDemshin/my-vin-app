// pages/index.tsx
import { useState } from 'react'
import { useTranslation } from 'next-i18next'
import Header from '../components/Header'

export default function Home() {
  const { t } = useTranslation('common')

  const [vin,          setVin]        = useState('')
  const [email,        setEmail]      = useState('')
  const [reportType,   setReportType] = useState<'info'|'decode'|'stolen-check'>('decode')
  const [pdfUrl,       setPdfUrl]     = useState<string | null>(null)
  const [loading,      setLoading]    = useState(false)
  const [userExists,   setUserExists] = useState<boolean | null>(null)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    setPdfUrl(null)
    setUserExists(null)

    // –í–∞–ª–∏–¥–∞—Ü–∏—è VIN –∏ e-mail
    if (!/^[A-Z0-9]{17}$/.test(vin)) {
      alert('VIN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ 17 —Å–∏–º–≤–æ–ª–æ–≤ (A‚ÄìZ, 0‚Äì9).')
      return
    }
    if (!/\S+@\S+\.\S+/.test(email)) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail.')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let exists = false
    try {
      const resp = await fetch(`/api/users/exists?email=${encodeURIComponent(email)}`)
      const body = await resp.json()
      exists = body.exists
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err)
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å e-mail. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
      return
    }

    setUserExists(exists)

    // –î–∞–ª—å—à–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –æ—Ç—á—ë—Ç
    setLoading(true)
    try {
      const res = await fetch('/api/check-vin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ vin, email, reportType }),
      })
      if (!res.ok) {
        const err = await res.json()
        console.error('Server error:', err)
        alert(err.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç')
      } else {
        const blob = await res.blob()
        setPdfUrl(URL.createObjectURL(blob))
      }
    } catch (err) {
      console.error('Network error:', err)
      alert('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—á—ë—Ç–∞')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-200 via-purple-100 to-white dark:from-gray-900 dark:to-gray-800">
      <Header />
      <main className="flex justify-center items-center py-12 px-4">
        <form
          onSubmit={handleSubmit}
          className="space-y-4 w-full max-w-md bg-white/60 backdrop-blur-xl shadow-xl rounded-2xl p-8 border border-white/30"
        >
          <h1 className="text-3xl font-bold text-center text-gray-800 mb-6 drop-shadow-md">
            {t('title')}
          </h1>

          <input
            value={vin}
            onChange={e => setVin(e.target.value.toUpperCase())}
            placeholder={t('vin')}
            maxLength={17}
            className="w-full px-4 py-2 rounded-lg border focus:ring-2 focus:ring-blue-400"
            required
          />

          <input
            type="email"
            value={email}
            onChange={e => setEmail(e.target.value)}
            placeholder={t('email')}
            className="w-full px-4 py-2 rounded-lg border focus:ring-2 focus:ring-blue-400"
            required
          />

          <select
            value={reportType}
            onChange={e => setReportType(e.target.value as any)}
            className="w-full px-4 py-2 rounded-lg border focus:ring-2 focus:ring-blue-400"
          >
            <option value="info">VIN Decode Info</option>
            <option value="decode">VIN Decode</option>
            <option value="stolen-check">Stolen Check</option>
          </select>

          <button
            disabled={loading}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-lg shadow-md disabled:opacity-50"
          >
            {loading ? '–ó–∞–ø—Ä–æ—Å‚Ä¶' : t('check_vin')}
          </button>

          {/* –°—Å—ã–ª–∫–∞ –Ω–∞ PDF */}
          {pdfUrl && (
            <div className="mt-4 text-center">
              <a
                href={pdfUrl}
                download={`vin-report-${vin}.pdf`}
                className="text-blue-700 hover:underline font-medium"
              >
                üìÑ {t('download_report')}
              </a>
            </div>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥ –æ—Ç—á—ë—Ç–æ–º */}
          {userExists === true && (
            <p className="mt-4 text-center text-green-800">
              –û—Ç—á—ë—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.
            </p>
          )}
          {userExists === false && (
            <p className="mt-4 text-center text-red-800">
              –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,{' '}
              <a href="/auth/signup" className="underline text-blue-600">
                –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å
              </a>.
            </p>
          )}
        </form>
      </main>
    </div>
  )
}
